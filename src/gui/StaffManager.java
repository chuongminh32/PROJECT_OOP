/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;
import controllers.StaffController;
import java.util.List;
import java.sql.SQLException; // lỗi kết nối sql
import java.sql.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;


import models.Staff;
/**
 *
 * @author HP
 */
public class StaffManager extends javax.swing.JFrame {
    
    private StaffController staffcontroller = new StaffController();
    private DefaultTableModel dtablemodel;
    private boolean isEditing = false;
    
//    Staff_Table stafftable = new Staff_Table();
    
    /**
     * Creates new form StaffManager
     * @throws java.sql.SQLException
     * @throws java.lang.ClassNotFoundException
     */
    
    private void setData(List<Staff> staff_list)  throws SQLException, ClassNotFoundException{
        dtablemodel.setRowCount(0);
        //Truy xuất dữ liệu từ database
        for (Staff staff: staff_list){
            dtablemodel.addRow(new Object[]{staff.getId(), staff.getName(), staff.getEmail(),
                staff.getPhoneNumber() ,staff.getPosition(), staff.getHire_date(), staff.getPassword()});    
        } //close for
        
    }
    
    private void add_Staff(Staff staff) throws SQLException, ClassNotFoundException{
        //Thêm mới người dùng vào database và hiển thị ra màn hình
        this.staffcontroller.insertStaff(staff);
        setData(staffcontroller.getAllStaffs());  
    }
    private void delete_Staff(String id) throws SQLException, ClassNotFoundException{
        //Thêm mới người dùng vào database và hiển thị ra màn hình
        this.staffcontroller.deleteStaff(id);
        setData(staffcontroller.getAllStaffs()); 
    }
    private void update_Staff(String id, Staff staff) throws SQLException, ClassNotFoundException {
        //Cập nhật người dùng, nếu không tìm thấy id thì thêm mới
        this.staffcontroller.updateStaff(staff, id);
        setData(staffcontroller.getAllStaffs());
    }
            
    private void set_field(boolean root){
        this.nameField.setEnabled(root);
        this.idField.setEnabled(root);
        this.phoneField.setEnabled(root);
        this.emailField.setEnabled(root);
        this.hireDateField.setEnabled(root);
        this.PasswordField.setEnabled(root);
        this.positionField.setEnabled(root);
    }
    private void set_field_value(int row){
        this.idField.setText((String) this.Staff_Table.getValueAt(row, 0));
        this.nameField.setText((String) this.Staff_Table.getValueAt(row, 1));
        this.emailField.setText((String) this.Staff_Table.getValueAt(row, 2));
        this.phoneField.setText((String) this.Staff_Table.getValueAt(row, 3));
        this.positionField.setText((String) this.Staff_Table.getValueAt(row, 4));
        this.hireDateField.setText(this.Staff_Table.getValueAt(row, 5).toString()); // Chuyển đổi giá trị ngày tháng thành chuỗi
        this.PasswordField.setText((String) this.Staff_Table.getValueAt(row, 6));
    }
    
    private boolean is_nonnull_field(){
        if (this.nameField.getText().trim().isEmpty() || 
            this.hireDateField.getText().trim().isEmpty() || 
            this.PasswordField.getPassword().length == 0) {
            JOptionPane.showMessageDialog(StaffManager.this, "You have to fill in the blank!", "Input Error", JOptionPane.WARNING_MESSAGE);
        }
        return false;
    }
            
    public StaffManager() throws SQLException, ClassNotFoundException {
        /* HÀM HIỂN THỊ BẢNG QUẢN LÝ NHÂN VIÊN
        */
        initComponents();
        this.dtablemodel = new DefaultTableModel(){
            //Không cho phép người dùng sửa trực tiếp trên bảng
            @Override 
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        this.Staff_Table.setModel(dtablemodel);
       
        dtablemodel.addColumn("id");
        dtablemodel.addColumn("name");
        dtablemodel.addColumn("email");
        dtablemodel.addColumn("phone");
        dtablemodel.addColumn("position");
        dtablemodel.addColumn("hireDate");
        dtablemodel.addColumn("password");
        
        setData(staffcontroller.getAllStaffs()); 
        // Đảm bảo bảng luôn chiếm hết chiều rộng của JScrollPane 
        Staff_Table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Staff_Table = new javax.swing.JTable();
        add_button = new javax.swing.JButton();
        refresh_button1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        idField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        phoneField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        hireDateField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        PasswordField = new javax.swing.JPasswordField();
        delete_button = new javax.swing.JButton();
        update_button = new javax.swing.JButton();
        positionField = new javax.swing.JTextField();
        search_button = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 525, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(500, 400));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(58, 93, 156));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(107, 173, 206));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("STAFF MANAGER");
        jLabel3.setOpaque(true);
        jLabel3.setPreferredSize(new java.awt.Dimension(30, 16));
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 200, 40));

        jLabel4.setBackground(new java.awt.Color(107, 173, 206));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Nguyen Admin");
        jLabel4.setPreferredSize(new java.awt.Dimension(30, 16));
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 130, 30));

        jLabel6.setBackground(new java.awt.Color(107, 173, 206));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Admin");
        jLabel6.setPreferredSize(new java.awt.Dimension(30, 16));
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 130, 30));

        jPanel2.setBackground(new java.awt.Color(107, 173, 206));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 930, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 42, Short.MAX_VALUE)
        );

        Staff_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Staff_Table.setToolTipText("");
        Staff_Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Staff_Table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Staff_Table.setFillsViewportHeight(true);
        Staff_Table.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        Staff_Table.setShowGrid(false);
        jScrollPane1.setViewportView(Staff_Table);

        add_button.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        add_button.setText("ADD");
        add_button.setPreferredSize(new java.awt.Dimension(75, 30));
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });

        refresh_button1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        refresh_button1.setText("REFRESH");
        refresh_button1.setPreferredSize(new java.awt.Dimension(75, 30));
        refresh_button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_button1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("NAME:");

        nameField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameField.setAutoscrolls(false);
        nameField.setEnabled(false);
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        idField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        idField.setAutoscrolls(false);
        idField.setEnabled(false);
        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("ID:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("POSITION:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("EMAIL:");

        emailField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        emailField.setAutoscrolls(false);
        emailField.setEnabled(false);
        emailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailFieldActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("PHONE NUMBER:");

        phoneField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        phoneField.setAutoscrolls(false);
        phoneField.setEnabled(false);
        phoneField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneFieldActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("HIRE DATE:");

        hireDateField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        hireDateField.setToolTipText("");
        hireDateField.setAutoscrolls(false);
        hireDateField.setEnabled(false);
        hireDateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hireDateFieldActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setText("PASSWORD:");

        PasswordField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        PasswordField.setToolTipText("");
        PasswordField.setEnabled(false);

        delete_button.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        delete_button.setText("DELETE");
        delete_button.setAutoscrolls(true);
        delete_button.setPreferredSize(new java.awt.Dimension(75, 30));
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        update_button.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        update_button.setText("UPDATE");
        update_button.setAutoscrolls(true);
        update_button.setPreferredSize(new java.awt.Dimension(75, 30));
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        positionField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        positionField.setToolTipText("");
        positionField.setEnabled(false);

        search_button.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        search_button.setText("SEARCH");
        search_button.setAutoscrolls(true);
        search_button.setPreferredSize(new java.awt.Dimension(75, 30));
        search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(79, 79, 79)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79)
                                .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(202, 202, 202)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hireDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                    .addComponent(positionField)))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(refresh_button1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(224, 224, 224)
                        .addComponent(add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(delete_button, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(update_button, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(search_button, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 929, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(positionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(hireDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(7, 7, 7)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refresh_button1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete_button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update_button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed
        /*BUTTON XÓA STAFF RA KHỎI DATABASE
        - Có thể xóa từng bản ghi hoặc nhiều bản ghi cùng lúc
        - Chọn trực tiếp trên bản và ấn vào button "DELETE"
        */
        int[] rows = this.Staff_Table.getSelectedRows();
        
        if (rows.length < 1){
            JOptionPane.showMessageDialog(StaffManager.this, "You haven't choose any staff!");
        }
        else {
            int confirm = JOptionPane.showConfirmDialog(StaffManager.this, "Are you sure to delete this staff?");
            
            if (confirm == JOptionPane.YES_OPTION){
                try {
                    boolean delete = false;
                    String staff_id;
                    //Điều chỉnh giá trị index khi xóa lần lượt từng bản ghi
                    for (int i = 0; i < rows.length; i++) {
                        if (!delete) {
                            staff_id = String.valueOf(this.Staff_Table.getValueAt(rows[i] - i, 0)); 
                        } else {
                            staff_id = String.valueOf(this.Staff_Table.getValueAt(rows[i], 0));
                            delete = true;
                        }
                        this.delete_Staff(staff_id);
                    }     
                    
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(StaffManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }
    }//GEN-LAST:event_delete_buttonActionPerformed

    private void hireDateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hireDateFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_hireDateFieldActionPerformed

    private void phoneFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneFieldActionPerformed

    private void emailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailFieldActionPerformed

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void refresh_button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_button1ActionPerformed
        //HÀM BUTTON REFRESH DỮ LIỆU TỪ DATABASE
        try {
            dtablemodel.setRowCount(0);
            this.setData(staffcontroller.getAllStaffs());
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(StaffManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refresh_button1ActionPerformed

    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
        //HÀM BUTTON THÊM MỚI DỮ LIỆU VÀO DATABASE
        if (isEditing == false){
            this.set_field(true);
            this.isEditing = true;
        } else {
            if (this.idField.getText().trim().isEmpty()){
                JOptionPane.showMessageDialog(this, "ID field cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
            else {
                if (!this.is_nonnull_field()){
                    String email = this.emailField.getText().trim();
                    
                    try {
                        // Kiểm tra nếu email đã tồn tại trong cơ sở dữ liệu
                        if (this.staffcontroller.isEmailExists(email)) {
                            JOptionPane.showMessageDialog(this, "Error: Email " + email + " already exists.", "Database Error", JOptionPane.ERROR_MESSAGE);
                            return; // Dừng thực hiện nếu email đã tồn tại
                        }
                    } catch (SQLException | ClassNotFoundException ex) {
                        Logger.getLogger(StaffManager.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                    
                    Staff new_staff = new Staff();
                    new_staff.setId(this.idField.getText());
                    new_staff.setName(this.nameField.getText());
                    new_staff.setEmail(this.emailField.getText());
                    new_staff.setPhoneNumber(this.phoneField.getText());
                    new_staff.setPosition(this.positionField.getText());
                    char[] cpassword = this.PasswordField.getPassword();
                    String password = new String(cpassword);
                    new_staff.setPassword(password);
                    Date hireDate = Date.valueOf(this.hireDateField.getText());
                    new_staff.setHire_date(hireDate);
                    
                    this.add_Staff(new_staff);
                    
                    JOptionPane.showMessageDialog(this, "Staff inserted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    this.set_field(false);
                    this.isEditing = false;
                } catch (SQLException | ClassNotFoundException ex) {
                    if (ex.getMessage().contains("Violation of PRIMARY KEY constraint")) {
                        JOptionPane.showMessageDialog(this, "Error: ID " + this.idField.getText() + " already exists.", "Database Error", JOptionPane.ERROR_MESSAGE);
                    }
                    Logger.getLogger(StaffManager.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalArgumentException ex) {
                // Xử lý lỗi khi nhập dữ liệu không đúng định dạng cho hireDate
                    JOptionPane.showMessageDialog(this, "Invalid hire date format. Please enter the date in the format yyyy-mm-dd.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(StaffManager.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                
                
            }    
        }  
    }//GEN-LAST:event_add_buttonActionPerformed

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
        // BUTTON UPDATE THÔNG TIN STAFF
        int row = this.Staff_Table.getSelectedRow();
//        Staff staff = this.Staff_Table.getValueAt(row);
        if (row == -1) {
            JOptionPane.showMessageDialog(StaffManager.this, "You haven't choose any staff!");
        } else {
            if (!isEditing) {
                this.set_field_value(row);
                this.set_field(true);
                this.idField.setEnabled(false);
                isEditing = true;
            } else {
                try {
                    this.set_field(false);
                    isEditing = false;
                    Staff new_staff = new Staff();
                    new_staff.setId(this.idField.getText());
                    new_staff.setName(this.nameField.getText());
                    new_staff.setEmail(this.emailField.getText());
                    new_staff.setPhoneNumber(this.phoneField.getText());
                    new_staff.setPosition(this.positionField.getText());
                    char[] cpassword = this.PasswordField.getPassword();
                    String password = new String(cpassword);
                    new_staff.setPassword(password);
                    Date hireDate = Date.valueOf(this.hireDateField.getText());
                    new_staff.setHire_date(hireDate);
                    
                    this.update_Staff(new_staff.getId(), new_staff);
                    
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(StaffManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }
    }//GEN-LAST:event_update_buttonActionPerformed

    private void search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_buttonActionPerformed
        // BUTTON TÌM KIẾM THEO CÁC TRƯỜNG, KHÔNG PHÂN BIỆT HOA THƯỜNG
        if (!this.isEditing){
            this.set_field(true);
            this.isEditing = true;
        } else {
            this.isEditing = false;
            this.set_field(false);
            String id = this.idField.getText();
            String name = this.nameField.getText();
            String email = this.emailField.getText();
            String phone = this.phoneField.getText();
            String position = this.positionField.getText();
            char[] cpassword = this.PasswordField.getPassword();
            String password = new String(cpassword);
            String hireDate = this.hireDateField.getText();


            List<Staff> staffs = null;
            try {
                staffs = this.staffcontroller.findStaffByPartialFields(id, name, email, phone, position, hireDate, password);

                this.setData(staffs);
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(StaffManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                

    }//GEN-LAST:event_search_buttonActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.sql.SQLException
     * @throws java.lang.ClassNotFoundException
     */
//    public static void main(String args[]) throws SQLException, ClassNotFoundException {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(StaffManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(StaffManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(StaffManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(StaffManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    new StaffManager().setVisible(true);
//                    
//                } catch (SQLException | ClassNotFoundException ex) {
//                    Logger.getLogger(StaffManager.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JTable Staff_Table;
    private javax.swing.JButton add_button;
    private javax.swing.JButton delete_button;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField hireDateField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField phoneField;
    private javax.swing.JTextField positionField;
    private javax.swing.JButton refresh_button1;
    private javax.swing.JButton search_button;
    private javax.swing.JButton update_button;
    // End of variables declaration//GEN-END:variables

    private String toString(char[] password) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
